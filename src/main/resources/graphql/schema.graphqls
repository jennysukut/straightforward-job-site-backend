type Query {
  findAllRoles(limit: Int): [Role]
  findAllAccounts(limit: Int): [Account]
  findAllAddresses(limit: Int): [Address]
  findAllPayments(limit: Int): [Payment]
}

type Mutation {
  saveRole(requestBody: RoleInput): Role
  deleteRole(id: ID): Boolean
  saveAccount(requestBody: AccountInput) : Account
  deleteAccount(id: ID): Boolean
  saveAddress(requestBody: AddressInput): Address
  deleteAddress(id: ID): Boolean
  savePayment(requestBody: PaymentInput): Payment
  deletePayment(id: ID): Boolean
}

input PaymentInput {
  id: ID
  name: String
  label: String
  account: AccountInput
}

input AddressInput {
  id: ID
  name: String
  label: String
  streetAddress: String
  secondLine: String
  city: String
  state: String
  country: String
  zipCode: String
  zipPlus4: String
  landmark: String
}

input AccountInput {
  id: ID
  name: String
  label: String
  email: String
  password: String
  enabled: Boolean
  roles: [RoleInput]
}

input RoleInput {
  id: ID
  name: String
  label: String
}

type Role {
  id: ID
  name: String
  label: String
}

type Account {
  id: ID
  name: String
  label: String
  email: String
  enabled: Boolean
  roles: [Role]
}

type Address {
  id: ID
  name: String
  label: String
  streetAddress: String
  secondLine: String
  city: String
  state: String
  country: String
  zipCode: String
  zipPlus4: String
  landmark: String
}

type Payment {
  id: ID
  name: String
  label: String
  account: Account
}
