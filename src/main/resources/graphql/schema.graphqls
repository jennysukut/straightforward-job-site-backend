type Query {
  currentDonations: String
}

type Mutation {
  signUp(name: String, email: String, betaTester: Boolean) : Result
  signupFellow(requestBody: FellowInput) : ID
  acceptFellowDonation(donation: FellowDonationInput) : Payment
  signupBusiness(requestBody: BusinessInput) : ID
  acceptBusinessDonation(donation: BusinessDonationInput) : Payment
  completePayment(input: PaymentResultInput): PaymentResult
}

input FellowInput {
  name: String
  email: String
  betaTester: Boolean
  collaborator: Boolean
  message: String
  referralPartner: Boolean
  referralCode: String
}

input FellowDonationInput {
  name: String
  amount: String
  email: String
}

type Result {
  success: Boolean
  message: String
}

input BusinessInput {
  business: String
  email: String
  earlySignup: Boolean
  betaTester: Boolean
}

input BusinessDonationInput {
  businessName: String
  contactName: String
  email: String
  amount: String
  referral: String
}

type Payment {
  id: ID
  checkoutToken: String
  status: String
}

input PaymentResultInput {
  hash: String
  data: TransactionDataInput
  paymentId: ID
}

input TransactionDataInput {
  transactionId: String
  dateCreated: String
  cardBatchId: String
  status: String
  type: String
  amount: String
  currency: String
  avsResponse: String
  cvvResponse: String
  approvalCode: String
  cardToken: String
  cardNumber: String
  cardHolderName: String
  customerCode: String
  invoiceNumber: String
  warning: String
}

# Assuming you have a type to represent the result of the transaction
type PaymentResult {
  # Define fields for the result
  success: Boolean
  message: String
  # Add any other fields you need for the result
  payment: Payment
}
